// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: axstate.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AxGrid.Internal.Proto {

  /// <summary>Holder for reflection information generated from axstate.proto</summary>
  public static partial class AxstateReflection {

    #region Descriptor
    /// <summary>File descriptor for axstate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AxstateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1heHN0YXRlLnByb3RvEhdjb20uYXhncmlkLmF4c3RhdGVfdGVzdBoSYXhz",
            "dGF0ZV9wYXJ0LnByb3RvIvcCCgZQU3RhdGUSCgoCaWQYASABKAQSDAoEbmFt",
            "ZRgCIAEoCRINCgVjb3VudBgDIAEoBRIMCgR0aW1lGAQgASgDEg8KB3ZlcnNp",
            "b24YBSABKA0SDAoEZGF0YRgGIAEoDBIzCgZzdHJ1Y3QYByABKAsyIy5jb20u",
            "YXhncmlkLmF4c3RhdGVfdGVzdC5QU3ViU3RydWN0EjQKB3N0cnVjdHMYCCAD",
            "KAsyIy5jb20uYXhncmlkLmF4c3RhdGVfdGVzdC5QU3ViU3RydWN0EgwKBGZs",
            "YWcYCSABKAgSCwoDaWRzGAogAygEEjcKCnN0YXRlX2VudW0YCyABKA4yIy5j",
            "b20uYXhncmlkLmF4c3RhdGVfdGVzdC5QU3RhdGVFbnVtEjgKC3N0YXRlX2Vu",
            "dW1zGAwgAygOMiMuY29tLmF4Z3JpZC5heHN0YXRlX3Rlc3QuUFN0YXRlRW51",
            "bRINCgVib29scxgNIAMoCBIPCgdzdHJpbmdzGA4gAygJQjMKF2NvbS5heGdy",
            "aWQuYXhzdGF0ZV90ZXN0UAGqAhVBeEdyaWQuSW50ZXJuYWwuUHJvdG9iBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AxGrid.Internal.Proto.AxstatePartReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AxGrid.Internal.Proto.PState), global::AxGrid.Internal.Proto.PState.Parser, new[]{ "Id", "Name", "Count", "Time", "Version", "Data", "Struct", "Structs", "Flag", "Ids", "StateEnum", "StateEnums", "Bools", "Strings" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  AxState - главное состояние
  ///  @gotags: axstate:"exclude"
  /// </summary>
  public sealed partial class PState : pb::IMessage<PState> {
    private static readonly pb::MessageParser<PState> _parser = new pb::MessageParser<PState>(() => new PState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AxGrid.Internal.Proto.AxstateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PState(PState other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      count_ = other.count_;
      time_ = other.time_;
      version_ = other.version_;
      data_ = other.data_;
      Struct = other.struct_ != null ? other.Struct.Clone() : null;
      structs_ = other.structs_.Clone();
      flag_ = other.flag_;
      ids_ = other.ids_.Clone();
      stateEnum_ = other.stateEnum_;
      stateEnums_ = other.stateEnums_.Clone();
      bools_ = other.bools_.Clone();
      strings_ = other.strings_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PState Clone() {
      return new PState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    ///  ID состояниея
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  Имя
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 6;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "struct" field.</summary>
    public const int StructFieldNumber = 7;
    private global::AxGrid.Internal.Proto.PSubStruct struct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AxGrid.Internal.Proto.PSubStruct Struct {
      get { return struct_; }
      set {
        struct_ = value;
      }
    }

    /// <summary>Field number for the "structs" field.</summary>
    public const int StructsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::AxGrid.Internal.Proto.PSubStruct> _repeated_structs_codec
        = pb::FieldCodec.ForMessage(66, global::AxGrid.Internal.Proto.PSubStruct.Parser);
    private readonly pbc::RepeatedField<global::AxGrid.Internal.Proto.PSubStruct> structs_ = new pbc::RepeatedField<global::AxGrid.Internal.Proto.PSubStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AxGrid.Internal.Proto.PSubStruct> Structs {
      get { return structs_; }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 9;
    private bool flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 10;
    private static readonly pb::FieldCodec<ulong> _repeated_ids_codec
        = pb::FieldCodec.ForUInt64(82);
    private readonly pbc::RepeatedField<ulong> ids_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  @gotags: axstate:"id"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "state_enum" field.</summary>
    public const int StateEnumFieldNumber = 11;
    private global::AxGrid.Internal.Proto.PStateEnum stateEnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AxGrid.Internal.Proto.PStateEnum StateEnum {
      get { return stateEnum_; }
      set {
        stateEnum_ = value;
      }
    }

    /// <summary>Field number for the "state_enums" field.</summary>
    public const int StateEnumsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::AxGrid.Internal.Proto.PStateEnum> _repeated_stateEnums_codec
        = pb::FieldCodec.ForEnum(98, x => (int) x, x => (global::AxGrid.Internal.Proto.PStateEnum) x);
    private readonly pbc::RepeatedField<global::AxGrid.Internal.Proto.PStateEnum> stateEnums_ = new pbc::RepeatedField<global::AxGrid.Internal.Proto.PStateEnum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AxGrid.Internal.Proto.PStateEnum> StateEnums {
      get { return stateEnums_; }
    }

    /// <summary>Field number for the "bools" field.</summary>
    public const int BoolsFieldNumber = 13;
    private static readonly pb::FieldCodec<bool> _repeated_bools_codec
        = pb::FieldCodec.ForBool(106);
    private readonly pbc::RepeatedField<bool> bools_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Bools {
      get { return bools_; }
    }

    /// <summary>Field number for the "strings" field.</summary>
    public const int StringsFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_strings_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> strings_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Strings {
      get { return strings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Count != other.Count) return false;
      if (Time != other.Time) return false;
      if (Version != other.Version) return false;
      if (Data != other.Data) return false;
      if (!object.Equals(Struct, other.Struct)) return false;
      if(!structs_.Equals(other.structs_)) return false;
      if (Flag != other.Flag) return false;
      if(!ids_.Equals(other.ids_)) return false;
      if (StateEnum != other.StateEnum) return false;
      if(!stateEnums_.Equals(other.stateEnums_)) return false;
      if(!bools_.Equals(other.bools_)) return false;
      if(!strings_.Equals(other.strings_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (struct_ != null) hash ^= Struct.GetHashCode();
      hash ^= structs_.GetHashCode();
      if (Flag != false) hash ^= Flag.GetHashCode();
      hash ^= ids_.GetHashCode();
      if (StateEnum != 0) hash ^= StateEnum.GetHashCode();
      hash ^= stateEnums_.GetHashCode();
      hash ^= bools_.GetHashCode();
      hash ^= strings_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Time);
      }
      if (Version != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Version);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Data);
      }
      if (struct_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Struct);
      }
      structs_.WriteTo(output, _repeated_structs_codec);
      if (Flag != false) {
        output.WriteRawTag(72);
        output.WriteBool(Flag);
      }
      ids_.WriteTo(output, _repeated_ids_codec);
      if (StateEnum != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) StateEnum);
      }
      stateEnums_.WriteTo(output, _repeated_stateEnums_codec);
      bools_.WriteTo(output, _repeated_bools_codec);
      strings_.WriteTo(output, _repeated_strings_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (struct_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Struct);
      }
      size += structs_.CalculateSize(_repeated_structs_codec);
      if (Flag != false) {
        size += 1 + 1;
      }
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (StateEnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StateEnum);
      }
      size += stateEnums_.CalculateSize(_repeated_stateEnums_codec);
      size += bools_.CalculateSize(_repeated_bools_codec);
      size += strings_.CalculateSize(_repeated_strings_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PState other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.struct_ != null) {
        if (struct_ == null) {
          struct_ = new global::AxGrid.Internal.Proto.PSubStruct();
        }
        Struct.MergeFrom(other.Struct);
      }
      structs_.Add(other.structs_);
      if (other.Flag != false) {
        Flag = other.Flag;
      }
      ids_.Add(other.ids_);
      if (other.StateEnum != 0) {
        StateEnum = other.StateEnum;
      }
      stateEnums_.Add(other.stateEnums_);
      bools_.Add(other.bools_);
      strings_.Add(other.strings_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Time = input.ReadInt64();
            break;
          }
          case 40: {
            Version = input.ReadUInt32();
            break;
          }
          case 50: {
            Data = input.ReadBytes();
            break;
          }
          case 58: {
            if (struct_ == null) {
              struct_ = new global::AxGrid.Internal.Proto.PSubStruct();
            }
            input.ReadMessage(struct_);
            break;
          }
          case 66: {
            structs_.AddEntriesFrom(input, _repeated_structs_codec);
            break;
          }
          case 72: {
            Flag = input.ReadBool();
            break;
          }
          case 82:
          case 80: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 88: {
            stateEnum_ = (global::AxGrid.Internal.Proto.PStateEnum) input.ReadEnum();
            break;
          }
          case 98:
          case 96: {
            stateEnums_.AddEntriesFrom(input, _repeated_stateEnums_codec);
            break;
          }
          case 106:
          case 104: {
            bools_.AddEntriesFrom(input, _repeated_bools_codec);
            break;
          }
          case 114: {
            strings_.AddEntriesFrom(input, _repeated_strings_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
